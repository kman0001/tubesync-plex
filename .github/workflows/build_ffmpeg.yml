name: FFmpeg Multi-Arch Minimal Build

on:
  schedule:
    - cron: '0 1 1 * *' # 매월 1일 UTC 01:00
  workflow_dispatch:

jobs:
  build_x86_64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cmake git \
            libtool pkg-config yasm nasm curl wget \
            zlib1g-dev libfdk-aac-dev libass-dev

      - name: Fetch latest FFmpeg release
        id: ffver
        run: |
          LATEST=$(curl -s https://ffmpeg.org/releases/ | grep -oP 'ffmpeg-\K[0-9]+\.[0-9]+(\.[0-9]+)?(?=\.tar\.bz2)' | sort -V | tail -1)
          echo "FF_VERSION=$LATEST" >> $GITHUB_ENV

      - name: Prepare build dir
        run: |
          mkdir -p ffmpeg/x86_64
          VERSION_FILE="ffmpeg/x86_64/version.txt"
          if [ -f "$VERSION_FILE" ]; then
            EXISTING=$(cat "$VERSION_FILE")
          else
            EXISTING="0.0.0"
          fi
          if dpkg --compare-versions "$EXISTING" "ge" "$FF_VERSION"; then
            echo "UP_TO_DATE=true" >> $GITHUB_ENV
          else
            echo "UP_TO_DATE=false" >> $GITHUB_ENV
          fi

      - name: Skip build if up-to-date
        if: env.UP_TO_DATE == 'true'
        run: |
          echo "FFmpeg x86_64 is up-to-date, skipping build."
          exit 0

      - name: Download and extract FFmpeg
        run: |
          wget https://ffmpeg.org/releases/ffmpeg-${FF_VERSION}.tar.bz2
          tar xjf ffmpeg-${FF_VERSION}.tar.bz2

      - name: Build minimal FFmpeg
        run: |
          cd ffmpeg-${FF_VERSION}
          ./configure \
            --prefix=$PWD/../ffmpeg/x86_64 \
            --arch=x86_64 \
            --target-os=linux \
            --disable-doc \
            --disable-ffplay \
            --disable-network \
            --disable-debug \
            --enable-small \
            --disable-programs \
            --disable-everything \
            --enable-decoder=subrip \
            --enable-decoder=dvdsub \
            --enable-decoder=hdmv_pgs \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-muxer=mp4 \
            --enable-muxer=mkv \
            --enable-parser=subrip
          make -j$(nproc)
          make install
          echo $FF_VERSION > ../ffmpeg/x86_64/version.txt

      - name: Commit & push ffmpeg/x86_64 binaries
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update FFmpeg x86_64 binaries"
          branch: main
          files: ffmpeg/x86_64/bin/ffmpeg,ffmpeg/x86_64/bin/ffprobe,ffmpeg/x86_64/version.txt

  build_aarch64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install cross-compile dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cmake git \
            libtool pkg-config yasm nasm curl wget \
            zlib1g-dev libfdk-aac-dev libass-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Fetch latest FFmpeg release
        id: ffver
        run: |
          LATEST=$(curl -s https://ffmpeg.org/releases/ | grep -oP 'ffmpeg-\K[0-9]+\.[0-9]+(\.[0-9]+)?(?=\.tar\.bz2)' | sort -V | tail -1)
          echo "FF_VERSION=$LATEST" >> $GITHUB_ENV

      - name: Prepare build dir
        run: |
          mkdir -p ffmpeg/aarch64
          VERSION_FILE="ffmpeg/aarch64/version.txt"
          if [ -f "$VERSION_FILE" ]; then
            EXISTING=$(cat "$VERSION_FILE")
          else
            EXISTING="0.0.0"
          fi
          if dpkg --compare-versions "$EXISTING" "ge" "$FF_VERSION"; then
            echo "UP_TO_DATE=true" >> $GITHUB_ENV
          else
            echo "UP_TO_DATE=false" >> $GITHUB_ENV
          fi

      - name: Skip build if up-to-date
        if: env.UP_TO_DATE == 'true'
        run: |
          echo "FFmpeg aarch64 is up-to-date, skipping build."
          exit 0

      - name: Download and extract FFmpeg
        run: |
          wget https://ffmpeg.org/releases/ffmpeg-${FF_VERSION}.tar.bz2
          tar xjf ffmpeg-${FF_VERSION}.tar.bz2

      - name: Cross-compile minimal FFmpeg
        run: |
          cd ffmpeg-${FF_VERSION}
          ./configure \
            --prefix=$PWD/../ffmpeg/aarch64 \
            --arch=aarch64 \
            --target-os=linux \
            --cross-prefix=aarch64-linux-gnu- \
            --disable-doc \
            --disable-ffplay \
            --disable-network \
            --disable-debug \
            --enable-small \
            --disable-programs \
            --disable-everything \
            --enable-decoder=subrip \
            --enable-decoder=dvdsub \
            --enable-decoder=hdmv_pgs \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-muxer=mp4 \
            --enable-muxer=mkv \
            --enable-parser=subrip
          make -j$(nproc)
          make install
          echo $FF_VERSION > ../ffmpeg/aarch64/version.txt

      - name: Commit & push ffmpeg/aarch64 binaries
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Update FFmpeg aarch64 binaries"
          branch: main
          files: ffmpeg/aarch64/bin/ffmpeg,ffmpeg/aarch64/bin/ffprobe,ffmpeg/aarch64/version.txt
