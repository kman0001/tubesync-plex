name: FFmpeg Multi-Arch Minimal Build

on:
  schedule:
    - cron: '0 1 1 * *' # 매월 1일 UTC 00:00 (한국시간 오전 10시)
  workflow_dispatch: # 수동 실행 가능

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cmake git \
            libtool pkg-config yasm nasm curl wget \
            zlib1g-dev libfdk-aac-dev libass-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Fetch latest FFmpeg release version
        id: ffver
        run: |
          LATEST=$(curl -s https://ffmpeg.org/releases/ | \
            grep -oE 'ffmpeg-[0-9]+\.[0-9]+(\.[0-9]+)?\.tar\.bz2' | \
            sed -E 's/ffmpeg-|\.tar\.bz2//g' | sort -V | tail -1)
          echo "FF_VERSION=$LATEST" >> $GITHUB_ENV
          echo "✅ Latest FFmpeg version: $LATEST"

      - name: Prepare build directory
        run: |
          BUILD_DIR="ffmpeg/${{ matrix.arch }}"
          mkdir -p $BUILD_DIR
          VERSION_FILE="$BUILD_DIR/version.txt"
          if [ -f "$VERSION_FILE" ]; then
            EXISTING=$(cat "$VERSION_FILE")
          else
            EXISTING="0.0.0"
          fi
          echo "EXISTING_VERSION=$EXISTING" >> $GITHUB_ENV

          if dpkg --compare-versions "$EXISTING" "ge" "$FF_VERSION"; then
            echo "UP_TO_DATE=true" >> $GITHUB_ENV
          else
            echo "UP_TO_DATE=false" >> $GITHUB_ENV
          fi

      - name: Skip build if already up-to-date
        if: env.UP_TO_DATE == 'true'
        run: |
          echo "🟢 FFmpeg $FF_VERSION already built for ${{ matrix.arch }}. Skipping."
          exit 0

      - name: Download FFmpeg source
        run: |
          wget -q https://ffmpeg.org/releases/ffmpeg-${FF_VERSION}.tar.bz2
          tar xjf ffmpeg-${FF_VERSION}.tar.bz2

      - name: Configure & build minimal FFmpeg (${{ matrix.arch }})
        run: |
          cd ffmpeg-${FF_VERSION}
          PREFIX_DIR=$GITHUB_WORKSPACE/ffmpeg/${{ matrix.arch }}
          mkdir -p $PREFIX_DIR/bin

          if [ "${{ matrix.arch }}" = "aarch64" ]; then
            CROSS_PREFIX="aarch64-linux-gnu-"
            ARCH_FLAGS="--arch=aarch64 --target-os=linux"
          else
            CROSS_PREFIX=""
            ARCH_FLAGS="--arch=x86_64 --target-os=linux"
          fi

          ./configure \
            --prefix=$PREFIX_DIR \
            $ARCH_FLAGS \
            ${CROSS_PREFIX:+--cross-prefix=$CROSS_PREFIX} \
            --disable-doc \
            --disable-ffplay \
            --disable-network \
            --disable-debug \
            --enable-small \
            --enable-ffmpeg \
            --enable-ffprobe \
            --disable-everything \
            --enable-decoder=subrip \
            --enable-decoder=dvdsub \
            --enable-decoder=hdmv_pgs \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-muxer=mp4 \
            --enable-muxer=mkv \
            --enable-parser=subrip

          make -j$(nproc)
          make install

          echo $FF_VERSION > $PREFIX_DIR/version.txt

      - name: Commit and push built binaries
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto-build FFmpeg ${{ env.FF_VERSION }} (${{ matrix.arch }})"
          branch: main
          file_pattern: ffmpeg/${{ matrix.arch }}/**
