name: FFmpeg Multi-Arch Minimal Build

on:
  schedule:
    - cron: '0 1 1 * *' # 매월 1일 UTC 00:00
  workflow_dispatch: # 수동 실행 가능

jobs:
  build_x86_64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cmake git \
            libtool pkg-config yasm nasm curl wget \
            zlib1g-dev libfdk-aac-dev libass-dev

      - name: Fetch latest FFmpeg release version
        id: ffver
        run: |
          LATEST=$(curl -s https://ffmpeg.org/releases/ | grep -oE 'ffmpeg-[0-9]+\.[0-9]+(\.[0-9]+)?\.tar\.bz2' | sed -E 's/ffmpeg-|\.tar\.bz2//g' | sort -V | tail -1)
          echo "FF_VERSION=$LATEST" >> $GITHUB_ENV
          echo "Latest FFmpeg version: $LATEST"

      - name: Prepare build directory
        run: |
          BUILD_DIR="ffmpeg/x86_64"
          mkdir -p $BUILD_DIR
          VERSION_FILE="$BUILD_DIR/version.txt"
          if [ -f "$VERSION_FILE" ]; then
            EXISTING=$(cat "$VERSION_FILE")
          else
            EXISTING="0.0.0"
          fi
          echo "EXISTING_VERSION=$EXISTING" >> $GITHUB_ENV
          if dpkg --compare-versions "$EXISTING" "ge" "$FF_VERSION"; then
            echo "UP_TO_DATE=true" >> $GITHUB_ENV
          else
            echo "UP_TO_DATE=false" >> $GITHUB_ENV
          fi

      - name: Skip build if up-to-date
        if: env.UP_TO_DATE == 'true'
        run: |
          echo "FFmpeg is already up-to-date for x86_64, skipping build."
          exit 0

      - name: Download FFmpeg source
        run: |
          wget https://ffmpeg.org/releases/ffmpeg-${FF_VERSION}.tar.bz2
          tar xjf ffmpeg-${FF_VERSION}.tar.bz2

      - name: Configure & build minimal FFmpeg (x86_64)
        run: |
          cd ffmpeg-${FF_VERSION}
          ./configure \
            --prefix=$PWD/../ffmpeg/x86_64/tmp \
            --arch=x86_64 \
            --target-os=linux \
            --disable-doc \
            --disable-ffplay \
            --disable-network \
            --disable-debug \
            --enable-small \
            --disable-programs \
            --disable-everything \
            --enable-ffmpeg \
            --enable-ffprobe \
            --enable-decoder=subrip \
            --enable-decoder=dvdsub \
            --enable-decoder=hdmv_pgs \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-muxer=mp4 \
            --enable-muxer=mkv \
            --enable-parser=subrip
          make -j$(nproc)
          make install

          # ✅ 필요한 3개 파일만 이동
          cd ../ffmpeg/x86_64
          mv tmp/bin/ffmpeg .
          mv tmp/bin/ffprobe .
          echo $FF_VERSION > version.txt
          rm -rf tmp include lib share

      - name: Commit and push built binaries
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto-build FFmpeg ${{ env.FF_VERSION }} (x86_64)"
          branch: main
          file_pattern: |
            ffmpeg/x86_64/ffmpeg
            ffmpeg/x86_64/ffprobe
            ffmpeg/x86_64/version.txt
          skip_fetch: false
          push_options: '--force-with-lease'


  build_aarch64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install cross-compile dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cmake git \
            libtool pkg-config yasm nasm curl wget \
            zlib1g-dev libfdk-aac-dev libass-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Fetch latest FFmpeg release version
        id: ffver
        run: |
          LATEST=$(curl -s https://ffmpeg.org/releases/ | grep -oE 'ffmpeg-[0-9]+\.[0-9]+(\.[0-9]+)?\.tar\.bz2' | sed -E 's/ffmpeg-|\.tar\.bz2//g' | sort -V | tail -1)
          echo "FF_VERSION=$LATEST" >> $GITHUB_ENV
          echo "Latest FFmpeg version: $LATEST"

      - name: Prepare build directory
        run: |
          BUILD_DIR="ffmpeg/aarch64"
          mkdir -p $BUILD_DIR
          VERSION_FILE="$BUILD_DIR/version.txt"
          if [ -f "$VERSION_FILE" ]; then
            EXISTING=$(cat "$VERSION_FILE")
          else
            EXISTING="0.0.0"
          fi
          echo "EXISTING_VERSION=$EXISTING" >> $GITHUB_ENV
          if dpkg --compare-versions "$EXISTING" "ge" "$FF_VERSION"; then
            echo "UP_TO_DATE=true" >> $GITHUB_ENV
          else
            echo "UP_TO_DATE=false" >> $GITHUB_ENV
          fi

      - name: Skip build if up-to-date
        if: env.UP_TO_DATE == 'true'
        run: |
          echo "FFmpeg is already up-to-date for aarch64, skipping build."
          exit 0

      - name: Download FFmpeg source
        run: |
          wget https://ffmpeg.org/releases/ffmpeg-${FF_VERSION}.tar.bz2
          tar xjf ffmpeg-${FF_VERSION}.tar.bz2

      - name: Configure & build minimal FFmpeg (aarch64)
        run: |
          cd ffmpeg-${FF_VERSION}
          ./configure \
            --prefix=$PWD/../ffmpeg/aarch64/tmp \
            --arch=aarch64 \
            --target-os=linux \
            --cross-prefix=aarch64-linux-gnu- \
            --disable-doc \
            --disable-ffplay \
            --disable-network \
            --disable-debug \
            --enable-small \
            --disable-programs \
            --disable-everything \
            --enable-ffmpeg \
            --enable-ffprobe \
            --enable-decoder=subrip \
            --enable-decoder=dvdsub \
            --enable-decoder=hdmv_pgs \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-muxer=mp4 \
            --enable-muxer=mkv \
            --enable-parser=subrip
          make -j$(nproc)
          make install

          # ✅ 필요한 3개 파일만 이동
          cd ../ffmpeg/aarch64
          mv tmp/bin/ffmpeg .
          mv tmp/bin/ffprobe .
          echo $FF_VERSION > version.txt
          rm -rf tmp include lib share

      - name: Commit and push built binaries
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "Auto-build FFmpeg ${{ env.FF_VERSION }} (aarch64)"
          branch: main
          file_pattern: |
            ffmpeg/aarch64/ffmpeg
            ffmpeg/aarch64/ffprobe
            ffmpeg/aarch64/version.txt
          skip_fetch: false
          push_options: '--force-with-lease'
