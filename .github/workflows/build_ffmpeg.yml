name: FFmpeg Multi-Arch Sequential Build

on:
  schedule:
    - cron: '0 1 1 * *' # 매월 1일 UTC 01:00
  workflow_dispatch:

env:
  BUILD_ROOT: ${{ github.workspace }}/ffmpeg

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf automake build-essential cmake git \
            libtool pkg-config yasm nasm curl wget \
            zlib1g-dev libfdk-aac-dev libass-dev \
            gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Fetch latest FFmpeg release version
        id: ffver
        run: |
          LATEST=$(curl -s https://ffmpeg.org/releases/ | grep -oE 'ffmpeg-[0-9]+\.[0-9]+(\.[0-9]+)?\.tar\.bz2' | sed -E 's/ffmpeg-|\.tar\.bz2//g' | sort -V | tail -1)
          echo "FF_VERSION=$LATEST" >> $GITHUB_ENV
          echo "Latest FFmpeg version: $LATEST"

      # -------------------------
      # Build for x86_64
      # -------------------------
      - name: Build FFmpeg (x86_64)
        run: |
          ARCH_DIR="$BUILD_ROOT/x86_64"
          mkdir -p "$ARCH_DIR"

          EXISTING_VERSION=$(cat "$ARCH_DIR/version.txt" 2>/dev/null || echo "0.0.0")
          if dpkg --compare-versions "$EXISTING_VERSION" "ge" "$FF_VERSION"; then
            echo "FFmpeg x86_64 already up to date ($EXISTING_VERSION >= $FF_VERSION)"
            exit 0
          fi

          wget -q https://ffmpeg.org/releases/ffmpeg-${FF_VERSION}.tar.bz2
          tar xjf ffmpeg-${FF_VERSION}.tar.bz2
          cd ffmpeg-${FF_VERSION}

          ./configure \
            --prefix="$ARCH_DIR/tmp" \
            --arch=x86_64 \
            --target-os=linux \
            --disable-doc \
            --disable-ffplay \
            --disable-network \
            --disable-debug \
            --enable-small \
            --disable-programs \
            --disable-everything \
            --enable-ffmpeg \
            --enable-ffprobe \
            --enable-decoder=subrip \
            --enable-decoder=dvdsub \
            --enable-decoder=hdmv_pgs \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-muxer=mp4 \
            --enable-muxer=mkv \
            --enable-parser=subrip

          make -j$(nproc)
          make install

          # 필요한 파일만 이동
          mv "$ARCH_DIR/tmp/bin/ffmpeg" "$ARCH_DIR/ffmpeg"
          mv "$ARCH_DIR/tmp/bin/ffprobe" "$ARCH_DIR/ffprobe"
          echo "$FF_VERSION" > "$ARCH_DIR/version.txt"
          rm -rf "$ARCH_DIR/tmp"

          echo "✅ x86_64 build done:"
          ls -lh "$ARCH_DIR"

      - name: Commit x86_64 build
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git pull --rebase origin main || true

          git add ffmpeg/x86_64/ffmpeg ffmpeg/x86_64/ffprobe ffmpeg/x86_64/version.txt || true
          if git diff --cached --quiet; then
            echo "No changes to commit for x86_64"
          else
            git commit -m "Auto-build FFmpeg $FF_VERSION (x86_64)"
            git push origin main
          fi

      # -------------------------
      # Build for aarch64
      # -------------------------
      - name: Build FFmpeg (aarch64)
        run: |
          ARCH_DIR="$BUILD_ROOT/aarch64"
          mkdir -p "$ARCH_DIR"

          EXISTING_VERSION=$(cat "$ARCH_DIR/version.txt" 2>/dev/null || echo "0.0.0")
          if dpkg --compare-versions "$EXISTING_VERSION" "ge" "$FF_VERSION"; then
            echo "FFmpeg aarch64 already up to date ($EXISTING_VERSION >= $FF_VERSION)"
            exit 0
          fi

          wget -q https://ffmpeg.org/releases/ffmpeg-${FF_VERSION}.tar.bz2
          tar xjf ffmpeg-${FF_VERSION}.tar.bz2
          cd ffmpeg-${FF_VERSION}

          ./configure \
            --prefix="$ARCH_DIR/tmp" \
            --arch=aarch64 \
            --target-os=linux \
            --cross-prefix=aarch64-linux-gnu- \
            --disable-doc \
            --disable-ffplay \
            --disable-network \
            --disable-debug \
            --enable-small \
            --disable-programs \
            --disable-everything \
            --enable-ffmpeg \
            --enable-ffprobe \
            --enable-decoder=subrip \
            --enable-decoder=dvdsub \
            --enable-decoder=hdmv_pgs \
            --enable-demuxer=mov \
            --enable-demuxer=matroska \
            --enable-muxer=mp4 \
            --enable-muxer=mkv \
            --enable-parser=subrip

          make -j$(nproc)
          make install

          # 필요한 파일만 이동
          mv "$ARCH_DIR/tmp/bin/ffmpeg" "$ARCH_DIR/ffmpeg"
          mv "$ARCH_DIR/tmp/bin/ffprobe" "$ARCH_DIR/ffprobe"
          echo "$FF_VERSION" > "$ARCH_DIR/version.txt"
          rm -rf "$ARCH_DIR/tmp"

          echo "✅ aarch64 build done:"
          ls -lh "$ARCH_DIR"

      - name: Commit aarch64 build
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git pull --rebase origin main || true

          git add ffmpeg/aarch64/ffmpeg ffmpeg/aarch64/ffprobe ffmpeg/aarch64/version.txt || true
          if git diff --cached --quiet; then
            echo "No changes to commit for aarch64"
          else
            git commit -m "Auto-build FFmpeg $FF_VERSION (aarch64)"
            git push origin main
          fi
