name: Build Multi-Arch Docker & Cleanup Old Tags

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
  workflow_dispatch:

env:
  DOCKER_IMAGE: your-dockerhub-username/tubesync-plex

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:latest-amd64
            ${{ env.DOCKER_IMAGE }}:latest-arm64

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq python3 curl

      - name: Authenticate to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Delete old tags except latest
        run: |
          REPO=${{ env.DOCKER_IMAGE }}
          USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          TOKEN=${{ secrets.DOCKERHUB_TOKEN }}

          # REPO URL 인코딩
          REPO_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$REPO'''))")

          # 페이지네이션 처리
          URL="https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/?page_size=100"
          while [ -n "$URL" ]; do
            RESPONSE=$(curl -s -u $USERNAME:$TOKEN "$URL" || true)

            # JSON 유효성 검사
            if ! echo "$RESPONSE" | jq empty >/dev/null 2>&1; then
              echo "API did not return valid JSON. Stopping."
              break
            fi

            # null-safe 태그 추출
            TAGS=$(echo "$RESPONSE" | jq -r '.results[]?.name // empty')

            for TAG in $TAGS; do
              if [[ "$TAG" != "latest" && "$TAG" != "latest-amd64" && "$TAG" != "latest-arm64" ]]; then
                TAG_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$TAG'''))")
                echo "Deleting tag: $TAG"
                curl -s -X DELETE -u $USERNAME:$TOKEN "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$TAG_ENCODED/" || true
              fi
            done

            # 다음 페이지 URL
            URL=$(echo "$RESPONSE" | jq -r '.next')
          done
