name: Manual Docker Push & Cleanup

on:
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run in test mode (only list tags, no delete)"
        required: false
        default: "false"

env:
  DOCKER_IMAGE: kman0001/tubesync-plex
  TEST_MODE: ${{ github.event.inputs.test_mode }}

jobs:
  push-and-cleanup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Multi-Arch Image
        run: |
          echo "=== BUILD & PUSH ==="
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $DOCKER_IMAGE:latest \
            --tag $DOCKER_IMAGE:latest-amd64 \
            --tag $DOCKER_IMAGE:latest-arm64 \
            --push .

      - name: Cleanup old tags & manifests
        run: |
          echo "=== CLEANUP OLD TAGS & MANIFESTS ==="
          REPO="${{ env.DOCKER_IMAGE }}"
          USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          TOKEN="${{ secrets.DOCKERHUB_TOKEN }}"
          TEST_MODE="${{ env.TEST_MODE }}"

          # 안전하게 URL 인코딩
          REPO_ENCODED=$(python3 -c "import urllib.parse, os; print(urllib.parse.quote(os.environ.get('REPO','')))")

          URL="https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/?page_size=100"

          while [ -n "$URL" ]; do
            RESPONSE=$(curl -s -u "$USERNAME:$TOKEN" "$URL")

            # JSON 체크
            if ! echo "$RESPONSE" | jq empty >/dev/null 2>&1; then
              echo "❌ Invalid JSON response. Stop cleanup."
              break
            fi

            TAGS=$(echo "$RESPONSE" | jq -r '.results[]?.name // empty')

            for TAG in $TAGS; do
              if [[ "$TAG" != "latest" && "$TAG" != "latest-amd64" && "$TAG" != "latest-arm64" ]]; then
                if [[ "$TEST_MODE" == "true" ]]; then
                  echo "[TEST MODE] Would delete tag: $TAG"
                else
                  TAG_ENCODED=$(python3 -c "import urllib.parse, os; print(urllib.parse.quote(os.environ.get('TAG','')))") TAG="$TAG"
                  echo "Deleting tag: $TAG"
                  curl -s -X DELETE -u "$USERNAME:$TOKEN" "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$TAG_ENCODED/" || true

                  # 매니페스트 삭제
                  DIGESTS=$(curl -s -u "$USERNAME:$TOKEN" "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$TAG_ENCODED/" | jq -r '.images[].digest // empty')
                  for DIGEST in $DIGESTS; do
                    DIGEST_ENCODED=$(python3 -c "import urllib.parse, os; print(urllib.parse.quote(os.environ.get('DIGEST','')))") DIGEST="$DIGEST"
                    echo "Deleting manifest: $DIGEST"
                    curl -s -X DELETE -u "$USERNAME:$TOKEN" "https://hub.docker.com/v2/repositories/$REPO_ENCODED/manifests/$DIGEST_ENCODED/" || true
                  done
                fi
              fi
            done

            URL=$(echo "$RESPONSE" | jq -r '.next')
            if [[ "$URL" == "null" ]]; then URL=""; fi
          done
