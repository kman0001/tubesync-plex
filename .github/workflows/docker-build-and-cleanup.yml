name: Build and Cleanup Docker Images

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      test_mode:
        description: "Run in test mode (only list tags, no delete)"
        required: false
        default: "false"

env:
  DOCKER_IMAGE: your-dockerhub-username/tubesync-plex
  TEST_MODE: ${{ github.event.inputs.test_mode }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push multi-arch image
        run: |
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $DOCKER_IMAGE:latest \
            --tag $DOCKER_IMAGE:latest-amd64 \
            --tag $DOCKER_IMAGE:latest-arm64 \
            --push .

  cleanup:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Install jq & python3
        run: sudo apt-get update && sudo apt-get install -y jq python3 curl

      - name: Authenticate to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Cleanup old tags and manifests
        run: |
          REPO="${{ env.DOCKER_IMAGE }}"
          USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
          TOKEN="${{ secrets.DOCKERHUB_TOKEN }}"
          TEST_MODE="${{ env.TEST_MODE }}"

          REPO_ENCODED=$(python3 -c "import urllib.parse, os; print(urllib.parse.quote(os.environ['REPO']))")
          URL="https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/?page_size=100"

          echo "=== START Cleanup ==="
          while [ -n "$URL" ]; do
            RESPONSE=$(curl -s -u "$USERNAME:$TOKEN" "$URL" || true)

            # JSON Ïú†Ìö®ÏÑ± Ï≤¥ÌÅ¨
            if ! echo "$RESPONSE" | jq empty >/dev/null 2>&1; then
              echo "‚ùå Invalid JSON response. Stop cleanup."
              break
            fi

            TAGS=$(echo "$RESPONSE" | jq -r '.results[]?.name // empty')

            for TAG in $TAGS; do
              if [[ "$TAG" != "latest" && "$TAG" != "latest-amd64" && "$TAG" != "latest-arm64" ]]; then
                echo "üóë Found old tag: $TAG"

                if [[ "$TEST_MODE" == "true" ]]; then
                  echo "üîé [TEST MODE] Would delete tag: $TAG"
                else
                  TAG_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$TAG'''))")
                  echo "üöÆ Deleting tag: $TAG"
                  curl -s -X DELETE -u "$USERNAME:$TOKEN" "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$TAG_ENCODED/" || true

                  DIGESTS=$(curl -s -u "$USERNAME:$TOKEN" "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$TAG_ENCODED/" | jq -r '.images[].digest // empty')
                  for DIGEST in $DIGESTS; do
                    DIGEST_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$DIGEST'''))")
                    echo "üöÆ Deleting manifest: $DIGEST"
                    curl -s -X DELETE -u "$USERNAME:$TOKEN" "https://hub.docker.com/v2/repositories/$REPO_ENCODED/manifests/$DIGEST_ENCODED/" || true
                  done
                fi
              fi
            done

            URL=$(echo "$RESPONSE" | jq -r '.next')
            if [[ "$URL" == "null" ]]; then URL=""; fi
          done
          echo "=== END Cleanup ==="
