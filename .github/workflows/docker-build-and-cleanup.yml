name: Build Multi-Arch Docker & Auto Cleanup

on:
  workflow_dispatch:

env:
  DOCKER_IMAGE: kman0001/tubesync-plex

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & push multi-arch image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: |
            ${{ env.DOCKER_IMAGE }}:latest
            ${{ env.DOCKER_IMAGE }}:latest-amd64
            ${{ env.DOCKER_IMAGE }}:latest-arm64

  cleanup:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq python3 curl

      - name: Authenticate to Docker Hub
        run: |
          echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Test Mode: List tags and manifests
        id: test-list
        run: |
          REPO=${{ env.DOCKER_IMAGE }}
          USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          REPO_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$REPO'''))")
          URL="https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/?page_size=100"
          echo "TEST_TAGS=[]" >> $GITHUB_ENV

          while [ -n "$URL" ]; do
            RESPONSE=$(curl -s -u $USERNAME:$TOKEN "$URL" || true)
            if ! echo "$RESPONSE" | jq empty >/dev/null 2>&1; then
              echo "API did not return valid JSON. Stopping."
              break
            fi
            TAGS=$(echo "$RESPONSE" | jq -r '.results[]?.name // empty')
            for TAG in $TAGS; do
              if [[ "$TAG" != "latest" && "$TAG" != "latest-amd64" && "$TAG" != "latest-arm64" ]]; then
                echo "[TEST MODE] Would delete tag: $TAG"
                DIGESTS=$(curl -s -u $USERNAME:$TOKEN "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$TAG'''))")/" | jq -r '.images[].digest // empty')
                for DIGEST in $DIGESTS; do
                  echo "[TEST MODE] Would delete manifest: $DIGEST"
                done
              fi
            done
            URL=$(echo "$RESPONSE" | jq -r '.next')
          done

      - name: Confirm and Delete
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Starting actual deletion..."
          REPO=${{ env.DOCKER_IMAGE }}
          USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          REPO_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$REPO'''))")
          URL="https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/?page_size=100"

          while [ -n "$URL" ]; do
            RESPONSE=$(curl -s -u $USERNAME:$TOKEN "$URL" || true)
            TAGS=$(echo "$RESPONSE" | jq -r '.results[]?.name // empty')
            for TAG in $TAGS; do
              if [[ "$TAG" != "latest" && "$TAG" != "latest-amd64" && "$TAG" != "latest-arm64" ]]; then
                TAG_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$TAG'''))")
                echo "Deleting tag: $TAG"
                curl -s -X DELETE -u $USERNAME:$TOKEN "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$TAG_ENCODED/" || true
                DIGESTS=$(curl -s -u $USERNAME:$TOKEN "https://hub.docker.com/v2/repositories/$REPO_ENCODED/tags/$TAG_ENCODED/" | jq -r '.images[].digest // empty')
                for DIGEST in $DIGESTS; do
                  DIGEST_ENCODED=$(python3 -c "import urllib.parse; print(urllib.parse.quote('''$DIGEST'''))")
                  echo "Deleting manifest: $DIGEST"
                  curl -s -X DELETE -u $USERNAME:$TOKEN "https://hub.docker.com/v2/repositories/$REPO_ENCODED/manifests/$DIGEST_ENCODED/" || true
                done
              fi
            done
            URL=$(echo "$RESPONSE" | jq -r '.next')
          done
